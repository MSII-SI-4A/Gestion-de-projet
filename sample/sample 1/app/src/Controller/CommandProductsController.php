<?php
namespace App\Controller;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;

/**
 * CommandProducts Controller
 *
 * @property App\Model\Table\CommandProductsTable $CommandProducts
 */
class CommandProductsController extends AppController {
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent("ProccessDiscount");
    }


    /**
 * Index method
 *
 * @return void
 */
	public function index() {
		$this->paginate = [
			'contain' => ['Commands', 'Products']
		];
		$this->set('commandProducts', $this->paginate($this->CommandProducts));
	}

/**
 * View method
 *
 * @param string $id
 * @return void
 * @throws \Cake\Network\Exception\NotFoundException
 */
	public function view($id = null) {
		$commandProduct = $this->CommandProducts->get($id, [
			'contain' => ['Commands', 'Products']
		]);
		$this->set('commandProduct', $commandProduct);
	}

/**
 * Add method
 *
 * @return void
 */
	public function add() {
		$commandProduct = $this->CommandProducts->newEntity($this->request->data);
		if ($this->request->is('post')) {
			if ($this->CommandProducts->save($commandProduct)) {
				$this->Flash->success('The command product has been saved.');
				return $this->redirect(['action' => 'index']);
			} else {
				$this->Flash->error('The command product could not be saved. Please, try again.');
			}
		}
		$commands = $this->CommandProducts->Commands->find('list');
		$products = $this->CommandProducts->Products->find('list');
		$this->set(compact('commandProduct', 'commands', 'products'));
	}

/**
 * Edit method
 *
 * @param string $id
 * @return void
 * @throws \Cake\Network\Exception\NotFoundException
 */
	public function edit($id = null) {
		$commandProduct = $this->CommandProducts->get($id, [
			'contain' => []
		]);
		if ($this->request->is(['patch', 'post', 'put'])) {
			$commandProduct = $this->CommandProducts->patchEntity($commandProduct, $this->request->data);
			if ($this->CommandProducts->save($commandProduct)) {
				$this->Flash->success('The command product has been saved.');
				return $this->redirect(['action' => 'index']);
			} else {
				$this->Flash->error('The command product could not be saved. Please, try again.');
			}
		}
		$commands = $this->CommandProducts->Commands->find('list');
		$products = $this->CommandProducts->Products->find('list');
		$this->set(compact('commandProduct', 'commands', 'products'));
	}

/**
 * Delete method
 *
 * @param string $id
 * @return void
 * @throws \Cake\Network\Exception\NotFoundException
 */
	public function delete($id = null) {
		$commandProduct = $this->CommandProducts->get($id);
		$this->request->allowMethod(['post', 'delete']);
		if ($this->CommandProducts->delete($commandProduct)) {
			$this->Flash->success('The command product has been deleted.');
		} else {
			$this->Flash->error('The command product could not be deleted. Please, try again.');
		}
		return $this->redirect(['action' => 'index']);
	}

    public function getCurrent(){
        //TODO: remove ligne
        $this->request->session()->write("Command.id", 1);
        $commandId = $this->request->session()->read("Command.id");
        if(empty($commandId)){
            $this->Flash->error('Votre panier est vide, veuillez ajouter des articles à votre panier');
            return;
        }
        $commandRegistry = TableRegistry::get('CommandProducts');
        $query = $commandRegistry->find();
        $query->contain(['Products']);
        //$query->where(['id' => $commandId]);

        if($query->count() <= 0){
            $this->Flash->error('Votre panier est vide, veuillez ajouter des articles à votre panier');
            return;
        }

        $totalHT = 0;
        foreach($query as $key => $row){
            $totalHT += $row->nb*$row->product->value;
        }

        $discount = $this->ProccessDiscount->proccessDiscount($query);

        $this->set([
            'result' => $query,
            'totalHT' => $totalHT,
            'discount' => $discount
        ]);
    }
}
